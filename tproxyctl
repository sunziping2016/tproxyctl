#!/bin/bash

program_name=$(basename "$0")

sub_help() {
  echo "Usage: $program_name <subcommand> [options]"
  echo ""
  echo "Subcommands:"
  echo "  start"
  echo "  status"
  echo "  list"
  echo "  stop"
  echo "  wait"
  echo ""
  echo "For help with each subcommand run:"
  echo "$program_name <subcommand> -h|--help"
  echo ""
}

check_root() {
  if [[ $EUID -ne 0 ]]; then
     echo "This script must be run as root."
     exit 1
  fi
}

sub_list() {
  if [ -f /etc/tproxyctl ]; then
    current_port=$(iptables -t mangle -nL | sed -ne 's/.*TPROXY\s\+redirect\s\+0\.0\.0\.0:\([0-9]\+\).*/\1/p' | head -n 1)
    while IFS= read -r line; do
      name=$(echo "$line" | tr -s " " | cut -d " " -f 1)
      port=$(echo "$line" | tr -s " " | cut -d " " -f 2)
      socks_port=$(echo "$line" | tr -s " " | cut -d " " -f 3)
      default=$(echo "$line" | tr -s " " | cut -d " " -f 4)
      if [ "$default" = default ] && [ "$current_port" = "$port" ]; then
        echo -ne "\033[1;32m$name\033[0m => \033[1;33m$port\033[0m (\033[1;32mcurrent, default\033[0m) ... "
      elif [ "$default" = default ]; then
        echo -ne "\033[1;32m$name\033[0m => \033[1;33m$port\033[0m (\033[1;32mdefault\033[0m) ... "
      elif [ "$current_port" = "$port" ]; then
        echo -ne "\033[1;32m$name\033[0m => \033[1;33m$port\033[0m (\033[1;32mcurrent\033[0m) ... "
      else
        echo -ne "\033[1;32m$name\033[0m => \033[1;33m$port\033[0m ... "
      fi
       ts=$(date +%s%N);
      if curl -s -x socks5://localhost:$socks_port http://www.gstatic.com/generate_204; then
        tl=$((($(date +%s%N) - $ts)/1000000))
        echo -e "\033[1;32monline\033[0m (\033[1;33m${tl}ms\033[0m)"
      else
        echo -e "\033[1;31moffline\033[0m"
      fi
    done < /etc/tproxyctl
  else
    echo -e "\033[1;31mfailed to find the config file\033[0m"
  fi;
}

stop() {
  check_root
  ip rule del fwmark 1 table 100 2>/dev/null
  ip route del local 0.0.0.0/0 dev lo table 100 2>/dev/null
  iptables -t mangle -F V2RAY 2>/dev/null
  iptables -t mangle -F V2RAY_MARK 2>/dev/null
  iptables -t mangle -D PREROUTING -j V2RAY 2>/dev/null
  iptables -t mangle -D OUTPUT -j V2RAY_MARK 2>/dev/null
  iptables -t mangle -X V2RAY 2>/dev/null
  iptables -t mangle -X V2RAY_MARK 2>/dev/null
}

sub_stop() {
  stop
  sub_status
}

fetch_ip_address() {
  interface4=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\S+)')
  ip4=$(ip -o -4 addr list "$interface4" | awk '{print $4}' | cut -d/ -f1)
}

sub_status() {
  check_root
  port=$(iptables -t mangle -nL | sed -ne 's/.*TPROXY\s\+redirect\s\+0\.0\.0\.0:\([0-9]\+\).*/\1/p' | head -n 1)
  if [ -z "$port" ]; then
    echo -e "\033[1;31minactive\033[0m"
  else
    if [ -f /etc/tproxyctl ]; then
      while IFS= read -r line; do
        if [ "$(echo "$line" | tr -s " " | cut -d " " -f 2)" = "$port" ]; then
          name=$(echo "$line" | tr -s " " | cut -d " " -f 1)
          default=$(echo "$line" | tr -s " " | cut -d " " -f 4)
        fi
      done < /etc/tproxyctl
    fi
    if [ -z "$name" ]; then
      echo -e "\033[1;32mactive\033[0m@\033[1;33m$port\033[0m"
    elif [ "$default" = default ]; then
      echo -e "\033[1;32mactive\033[0m@\033[1;33m$port\033[0m (\033[1;32m$name, default\033[0m)"
    else
      echo -e "\033[1;32mactive\033[0m@\033[1;33m$port\033[0m (\033[1;32m$name\033[0m)"
    fi
  fi
}

select_port() {
  port="$1"
  re='^[0-9]+$'
  if ! [[ "$port" =~ $re ]]; then
    if [ -f /etc/tproxyctl ]; then
      while IFS= read -r line; do
        if [ "$(echo "$line" | tr -s " " | cut -d " " -f 1)" = "$port" ]; then
          real_port=$(echo "$line" | tr -s " " | cut -d " " -f 2)
          socks_port=$(echo "$line" | tr -s " " | cut -d " " -f 3)
        fi
      done < /etc/tproxyctl
    fi
    if [ -z "$real_port" ]; then
      while IFS= read -r line; do
        if [ "$(echo "$line" | tr -s " " | cut -d " " -f 4)" = default ]; then
          real_port=$(echo "$line" | tr -s " " | cut -d " " -f 2)
          socks_port=$(echo "$line" | tr -s " " | cut -d " " -f 3)
        fi
      done < /etc/tproxyctl
      if [ -z "$real_port" ]; then
        echo -e "\033[1;31munknown configuration: \"$port\"\033[0m"
        exit 1
      fi
    fi
    port="$real_port"
  fi
}

sub_wait() {
  socks_port="$1"
  re='^[0-9]+$'
  if ! [[ "$socks_port" =~ $re ]]; then
    select_port "$1"
  fi
  echo -ne "\033[1;33mwaiting online ... \033[0m"
  while ! curl -s -x socks5://localhost:$socks_port http://www.gstatic.com/generate_204; do
    sleep 5
  done
  echo -e "\033[1;32monline\033[0m"
}

sub_start() {
  check_root
  stop
  select_port "$1"
  if [ -n "$socks_port" ]; then
    sub_wait "$socks_port"
  fi
  fetch_ip_address

  # Setting up routes
  ip rule add fwmark 1 table 100
  ip route add local 0.0.0.0/0 dev lo table 100

  # Create chains
  iptables -t mangle -N V2RAY
  iptables -t mangle -N V2RAY_MARK

  # Proxy local network connections
  iptables -t mangle -A V2RAY -d "$ip4" -j RETURN

  iptables -t mangle -A V2RAY -d 0.0.0.0/8 -j RETURN
  iptables -t mangle -A V2RAY -d 127.0.0.0/8 -j RETURN
  iptables -t mangle -A V2RAY -d 169.254.0.0/16 -j RETURN
  iptables -t mangle -A V2RAY -d 224.0.0.0/4 -j RETURN
  iptables -t mangle -A V2RAY -d 240.0.0.0/4 -j RETURN
  iptables -t mangle -A V2RAY -d 255.255.255.255/32 -j RETURN

  iptables -t mangle -A V2RAY -d 10.0.0.0/8 -p tcp -j RETURN
  iptables -t mangle -A V2RAY -d 10.0.0.0/8 -p udp ! --dport 53 -j RETURN
  iptables -t mangle -A V2RAY -d 172.16.0.0/12 -p tcp -j RETURN
  iptables -t mangle -A V2RAY -d 172.16.0.0/12 -p udp ! --dport 53 -j RETURN
  iptables -t mangle -A V2RAY -d 192.168.0.0/16 -p tcp -j RETURN
  iptables -t mangle -A V2RAY -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN

  iptables -t mangle -A V2RAY -p udp -j TPROXY --on-port "$port" --tproxy-mark 1
  iptables -t mangle -A V2RAY -p tcp -j TPROXY --on-port "$port" --tproxy-mark 1

  # Proxy self connections
  iptables -t mangle -A V2RAY_MARK -d 0.0.0.0/8 -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 127.0.0.0/8 -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 169.254.0.0/16 -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 224.0.0.0/4 -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 240.0.0.0/4 -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 255.255.255.255/32 -j RETURN

  iptables -t mangle -A V2RAY_MARK -d 10.0.0.0/8 -p tcp -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 10.0.0.0/8 -p udp ! --dport 53 -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 172.16.0.0/12 -p tcp -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 172.16.0.0/12 -p udp ! --dport 53 -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 192.168.0.0/16 -p tcp -j RETURN
  iptables -t mangle -A V2RAY_MARK -d 192.168.0.0/16 -p udp ! --dport 53 -j RETURN

  iptables -t mangle -A V2RAY_MARK -j RETURN -m mark --mark 0xff
  iptables -t mangle -A V2RAY_MARK -p udp -j MARK --set-mark 1
  iptables -t mangle -A V2RAY_MARK -p tcp -j MARK --set-mark 1

  # Apply rules
  iptables -t mangle -A PREROUTING -j V2RAY
  iptables -t mangle -A OUTPUT -j V2RAY_MARK
  sub_status
}

subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        "sub_${subcommand}" "$@"
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "  Run '$program_name --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac
